CREATE EXTENSION IF NOT EXISTS CITEXT;
SET LOCAL synchronous_commit TO OFF;

-- ===============================
-- Tables
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS forums CASCADE;
DROP TABLE IF EXISTS threads CASCADE;
DROP TABLE IF EXISTS posts CASCADE;
DROP TABLE IF EXISTS votes CASCADE;
DROP TABLE IF EXISTS members CASCADE;

CREATE TABLE users (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email citext NOT NULL UNIQUE,
    nickname citext NOT NULL COLLATE "C" UNIQUE,
    fullname text DEFAULT NULL,
    about text DEFAULT NULL
);

CREATE TABLE forums (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug citext NOT NULL UNIQUE,
    title text NOT NULL,
    username citext NOT NULL REFERENCES users (nickname),
    threads integer DEFAULT 0,
    posts integer DEFAULT 0
);

CREATE TABLE threads (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    slug citext DEFAULT NULL,
    created timestamptz DEFAULT NOW(),
    title text NOT NULL,
    message text DEFAULT NULL,
    username citext NOT NULL REFERENCES users (nickname),
    forum citext NOT NULL REFERENCES forums (slug),
    votes integer DEFAULT 0
);

CREATE TABLE posts (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created timestamptz DEFAULT NOW(),
    isedited boolean DEFAULT FALSE,
    message text DEFAULT NULL,
    username citext NOT NULL REFERENCES users (nickname),
    forum citext NOT NULL REFERENCES forums (slug),
    thread integer NOT NULL REFERENCES threads,
    parent integer NOT NULL,
    path integer[],
    root integer 
);

CREATE TABLE votes (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    thread_id integer NOT NULL REFERENCES threads,
    username citext NOT NULL REFERENCES users (nickname),
    value integer NOT NULL,
	CONSTRAINT unique_votes UNIQUE (thread_id, username)
);

CREATE TABLE members (
    forum citext NOT NULL REFERENCES forums (slug),
    username citext NOT NULL REFERENCES users (nickname),
    CONSTRAINT unique_members UNIQUE (forum, username)
);


-- ===============================
-- Triggers
CREATE OR REPLACE FUNCTION create_thread() RETURNS TRIGGER AS
$thread_trigger$
	BEGIN
        UPDATE forums SET threads = threads + 1
	    WHERE slug = NEW.forum;
        RETURN NEW;
	END;
$thread_trigger$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_post() RETURNS TRIGGER AS
$post_trigger$
	BEGIN
		IF (NEW.parent = 0) THEN 
            NEW.path = ARRAY[NEW.id];
            NEW.root = NEW.id;
        ELSE 
            NEW.path = (SELECT posts.path || NEW.id FROM posts WHERE id = NEW.parent);
            NEW.root = NEW.path[1];
		END IF;
		
        UPDATE forums SET posts = posts + 1 
        WHERE slug = NEW.forum;
		RETURN NEW;
	END;
$post_trigger$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION create_vote() RETURNS TRIGGER AS
$create_vote_trigger$
    BEGIN
        UPDATE threads SET votes = votes + NEW.value
        WHERE id = NEW.thread_id;
        RETURN NEW;
    END;
$create_vote_trigger$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_vote() RETURNS TRIGGER AS
$update_vote_trigger$
	BEGIN
        IF (OLD.value = 1 AND NEW.value = -1) THEN
            UPDATE threads SET votes = votes - 2
            WHERE id = NEW.thread_id;
        END IF;
        IF (OLD.value = -1 AND NEW.value = 1) THEN
            UPDATE threads SET votes = votes + 2
            WHERE id = NEW.thread_id;
        END IF;
        RETURN OLD;
	END;
$update_vote_trigger$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_member_post() RETURNS TRIGGER AS
$create_member_post_trigger$
	BEGIN
        INSERT INTO members (forum, username)
	    VALUES (NEW.forum, NEW.username) ON CONFLICT DO NOTHING;
        RETURN NEW;
	END;
$create_member_post_trigger$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_member_thread() RETURNS TRIGGER AS
$create_member_thread_trigger$
	BEGIN
        INSERT INTO members (forum, username)
	    VALUES (NEW.forum, NEW.username) ON CONFLICT DO NOTHING;
        RETURN NEW;
	END;
$create_member_thread_trigger$
LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS thread_trigger ON posts;
DROP TRIGGER IF EXISTS post_trigger ON posts;
DROP TRIGGER IF EXISTS create_vote_trigger ON votes;
DROP TRIGGER IF EXISTS update_vote_triggerr ON votes;
DROP TRIGGER IF EXISTS create_member_trigger ON posts;

CREATE TRIGGER thread_trigger BEFORE INSERT ON threads FOR EACH ROW EXECUTE PROCEDURE create_thread();
CREATE TRIGGER post_trigger BEFORE INSERT ON posts FOR EACH ROW EXECUTE PROCEDURE create_post();
CREATE TRIGGER create_vote_trigger AFTER INSERT ON votes FOR EACH ROW EXECUTE PROCEDURE create_vote();
CREATE TRIGGER update_vote_trigger AFTER UPDATE ON votes FOR EACH ROW EXECUTE PROCEDURE update_vote();
CREATE TRIGGER create_member_post_trigger AFTER INSERT ON posts FOR EACH ROW EXECUTE PROCEDURE create_member_post();
CREATE TRIGGER create_member_thread_trigger AFTER INSERT ON threads FOR EACH ROW EXECUTE PROCEDURE create_member_thread();


-- ===============================
-- Indexes
DROP INDEX IF EXISTS indx_users_nickname;
DROP INDEX IF EXISTS indx_forums_slug;
DROP INDEX IF EXISTS indx_threads_slug;
DROP INDEX IF EXISTS indx_posts_id_created;
DROP INDEX IF EXISTS indx_posts_thread_id_created;
DROP INDEX IF EXISTS indx_posts_parent_thread;
DROP INDEX IF EXISTS indx_members_forum_username;

CREATE INDEX indx_users_nickname ON users (nickname);
CREATE INDEX indx_forums_slug ON forums (slug);
CREATE INDEX indx_threads_slug ON threads (slug);
CREATE INDEX indx_posts_id_created ON posts (id, created);
CREATE INDEX indx_posts_thread_id_created ON posts (thread, id, created);
CREATE INDEX indx_posts_parent_thread ON posts (parent, thread);
CREATE UNIQUE INDEX indx_members_forum_username ON members (forum, username);

